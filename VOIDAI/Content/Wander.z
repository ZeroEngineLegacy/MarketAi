/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Last Update: 1/3/2016                                                                                    */
/* Author: Zero Engine Team                                                                                 */
/* Last updated by: Jordan Ellis                                                                            */
/* Class: Wander                                                                                            */
/* Brief: This steering behavior maintains the "wandering direction" which is calculated by finding a       */
/*        vector from the object to a point on a circle offset from the object in the direction of its      */
/*        velocity. At each time step a random offset is added to the wander direction. The modified wander */
/*        direction is constrained to lie on a circle.                                                      */
/************************************************************************************************************/

class Wander : SteeringComponent
{
    [Dependency]
    var Transform : Transform = null;
    
    [Dependency]
    var Orientation : Orientation = null;
    
    // The radius of the circle which the target point is constrained to
    [Property]
    var CircleRadius : Real = 5;
    
    var Direction : Real2;
    
    var RandomGenerator : Random = new Random();
    
    [Override]
    function SteeringInitialize(init : CogInitializer)
    {
        var seed = this.Transform.Translation.X +
                   this.Transform.Translation.Y +
                   this.Transform.Translation.Z +
                   this.Space.TimeSpace.RealTimePassed;
        
        // Seed the random number generator
        this.RandomGenerator.Seed = seed as Integer;
        
        // Generate a random initial direction
        this.Direction = this.RandomGenerator.Real2(1.0,1.0);
    }

    [Override]
    function SteeringUpdate(event : UpdateEvent)
    {
        // If the component is not active do nothing
        if(!this.Active || !this.SteeringAccumulator.Active)
        {
            return;
        }
        
        // Calculate the vector offset to be added to the wander direction from the last frame
        var offset = this.RandomGenerator.Real2(0.0,1.0);
        
        offset = Math.Normalize(offset);
        
        var wanderDir = offset + this.Direction * this.CircleRadius;
        
        // Normalize to get a direction
        this.Direction = Math.Normalize(wanderDir);
        
        // Move the Object
        this.AddImpulse(this.OrientVector(this.Direction));
    }
    
    //Converts the Real2 wander direction into an oriented Real3 on the ForwardRight plane
    function OrientVector(dir : Real2) : Real3
    {
        // Orient the forward axis value of the wander direction
        return (this.Owner.Orientation.LocalForward * -dir.Y) +
               (this.Owner.Orientation.LocalRight * dir.X);
    }
}
