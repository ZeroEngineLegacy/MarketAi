/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Last Update: 1/3/2016                                                                                    */
/* Author: Zero Engine Team                                                                                 */
/* Last updated by: Jordan Ellis                                                                            */
/* Class: Seek                                                                                              */
/* Brief: Will cause the object to "seek" the target object by moving towards the target object's           */
/* current position                                                                                         */
/************************************************************************************************************/

class Seek : SteeringComponent
{
    [Dependency]
    var Transform : Transform = null;
    
    // Target object to be seek towards
    [Property]
    var Target : CogPath = null;
    
    // Range from the object in which it is valid to seek the target object
    // If the range is 0 the target object will always be seeked
    [Property]
    var SeekRange : Real
    {
        get { return this.SeekRangeDistance; }
        set
        {
            if (Math.ApproximatelyEqual(value, 0.0, 0.001))
                this.NoSeekRange = true;
            
            this.SeekRangeDistance = value;
        }
    }
    
    // Distance from the goal we're trying to seek to
    [Property]
    var GoalDistance : Real = 0.0;
    
    var SeekRangeDistance : Real = 0.0;
    var NoSeekRange : Boolean = true;
    
    // Used to track if the object is seeking
    var Seeking : Boolean = false;
    
    [Override]
    function SteeringUpdate(event : UpdateEvent)
    {
        // If this component is not active do nothing
        if (!this.Active || !this.SteeringAccumulator.Active)
        {
            return;
        }
        
        // Calculate a vector to the target object
        var targDir = this.Target.Cog.Transform.Translation - this.Transform.Translation;
        var targDis = Math.Length(targDir);
        
        // Normalize the vector to the target object so it does not affect movement speed
        targDir /= targDis;
        
        // Check if the target object is with in the range to seek it
        if ((this.NoSeekRange || targDis < this.SeekRange) && targDis > this.GoalDistance)
        {
            // Record that the object is seeking the target object
            this.Seeking = true;
            
            // Apply a linear impulse to move the object towards the target object's position
            this.AddImpulse(targDir);
        }
        else
        {
            // If the target object is out of seek range record that the targ object is no longer being seeked out
            this.Seeking = false;
            
            // Bring the object to a smooth stop, based on it's linear distance from the target
            var ratio = targDis / this.GoalDistance;
            
            this.SteeringAccumulator.AddImpulse(targDir, this.Weight * ratio);
        }
    }
}