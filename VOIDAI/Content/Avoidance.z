/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Last Update: 1/3/2016                                                                                    */
/* Author: Zero Engine Team                                                                                 */
/* Last updated by: Jordan Ellis                                                                            */
/* Class: Avoidance                                                                                         */
/* Brief: TODODODODODODODOD                                                                                 */
/************************************************************************************************************/

class Avoidance : SteeringComponent
{
    [Dependency]
    var Transform : Transform = null;
    
    [Dependency]
    var Orientation : Orientation = null;
    
    [Property]
    var DebugDrawContacts : Boolean = true;
    
    // The impulse we apply to the steering when we update
    var Impulse : Real3 = Real3.Zero;
    
    [Override]
    function SteeringUpdate(event : UpdateEvent)
    {
        this.Impulse = Math.Normalize(this.Impulse);
        
        //this.AddImpulse(this.Impulse);
        
        this.Impulse = Real3.Zero;
    }
    
    // Callback for sensor results
    // // Store the results
    
    // Update for each frame
    // Solve for Yaw (based on flag)
    // // Iterate over all contacts, find closest and most extreme after projecting them onto our axis (ignore perp normals)
    // // Calculate rotation to move point out of our view cone (preferablly in the direction of the last rotation)
    // // Save the direction of the last rotation
    // Solve for Pitch (based on flag)
    // // ...
    // Determine if we need to move back
    
    // TODO: Add more options to the sensor
    
    // TODO: Change up steering to have:
    // x AddLocalMovement (takes into account rotation)
    // x AddWorldMovement (ignores rotation)
    // x AddLookDirection
    // x Support for rigidbody
    // - Support for swept controller
}
