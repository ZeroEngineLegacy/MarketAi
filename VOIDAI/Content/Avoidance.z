/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Last Update: 1/3/2016                                                                                    */
/* Author: Zero Engine Team                                                                                 */
/* Last updated by: Jordan Ellis                                                                            */
/* Class: Avoidance                                                                                         */
/* Brief: TODODODODODODODOD                                                                                 */
/************************************************************************************************************/

class Avoidance : SteeringComponent
{
    [Dependency]
    var Transform : Transform = null;
    
    [Dependency]
    var Orientation : Orientation = null;
    
    [Property]
    var QueryCollider : CogPath;
    
    [Property]
    var DebugDrawContacts : Boolean = true;
    
    // The impulse we apply to the steering when we update
    var Impulse : Real3 = Real3.Zero;
    
    [Override]
    function SteeringInitialize(init : CogInitializer)
    {
        var cog = this.QueryCollider.Cog;
        
        if (cog != null)
        {
            Console.WriteLine("HERE");
            
            Zero.Connect(
                cog, Events.CollisionPersisted, this.OnCollisionPersisted
            );
        }
    }
    
    [Override]
    function SteeringUpdate(event : UpdateEvent)
    {
        this.Impulse = Math.Normalize(this.Impulse);
        
        this.AddImpulse(this.Impulse);
        
        this.Impulse = Real3.Zero;
    }
    
    function OnCollisionPersisted(event : CollisionEvent)
    {
        if (event.OtherObject.Collider.Ghost)
        {
            return;
        }
        
        foreach (var contact in event.ContactPoints)
        {
            contact.WorldPoint;
            
            if (this.DebugDrawContacts)
            {
                this.DebugDrawContact(contact);
            }
        }
    }
    
    function DebugDrawContact(contact : ContactPoint)
    {
        var sphere = new DebugSphere();
        
        sphere.Position = contact.WorldPoint;
        sphere.Radius = 0.25;
        sphere.Color = Real4(1, 1, 0, 1);
        
        DebugDraw.Add(sphere);
    }
}
