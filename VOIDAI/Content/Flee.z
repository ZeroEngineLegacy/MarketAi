/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Last Update: 1/3/2016                                                                                    */
/* Author: Zero Engine Team                                                                                 */
/* Last updated by: Arend Danielek                                                                          */
/* Class: Flee                                                                                              */
/* Brief: Will cause the object to "flee" the target object.                                                */
/************************************************************************************************************/

class Flee : ZilchComponent
{
    // this component requires a rigidBody component
    [Dependency]
    var RigidBody : RigidBody = null;
    
    // Seek requires an OrientationHelper component
    [Dependency]
    var OrientationHelper : OrientationHelper = null;
    
    // Determines if the component is active
    [Property]
    var Active : Boolean = true;
    
    // Constrain the seeking direction to the plane orthoganal to the object's up vector
    [Property]
    var ConstrainToOrientationPlane : Boolean = false;
    
    // Target object to be flee towards
    [Property]
    var Target : CogPath = null;
    
    // Range from the object in which it is valid to flee the target object
    // If the range is 0 the target object will always be fled
    [Property]
    var FleeRange : Real = 0.0;
    
    // Magnitude of the linear impulse to be applied each frame for fleeing movement
    [Property]
    var Speed : Real = 10.0;
    
    // the rate at which the object will rotate to matchit velocity direction in degrees per second
    [Property]
    var RotationSpeed : Real = 0.0;
    
    [Property]
    var DebugDrawEnabled : Boolean = false;
    
    // Used to track if the object is fleeing
    var Fleeing : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        // If this component is not active do nothing
        if(!this.Active)
        {
            return;
        }
        
        // Calculate a vector to the target object
        var targDir = this.Owner.Transform.Translation - this.Target.Cog.Transform.Translation;
        
        // Check if the target object is with in the range to flee it
        if(Math.LengthSq(targDir) < this.FleeRange * this.FleeRange || this.FleeRange == 0.0)
        {
            // Record that the object is fleeing the target object
            this.Fleeing = true;
            
            // Normalize the vector to the target object so it does not affect movement speed
            targDir = Math.Normalize(targDir);
            
            // Constrain the target direction to the orientation plane if needed
            if(this.ConstrainToOrientationPlane)
            {
                targDir = this.OrientationHelper.ConstrainVectorToPlane(OrientedPlanes.ForwardRight, targDir);
            }
            
            // Align the object at the given rotation rate to the direction of its velocity
            var newRot = this.Owner.Orientation.GetLookAtDirectionRotation(Math.Normalize(this.Owner.RigidBody.Velocity));
            this.Owner.Transform.Rotation = Math.Slerp(this.Owner.Transform.Rotation, newRot, Math.ToRadians(this.RotationSpeed) * event.Dt);
            
            
            // Apply a force to move the object towards the target object's position
            this.Owner.RigidBody.ApplyForce(targDir * this.Speed);
        }
        else
        {
            // If the target object is out of flee range record that the targ object is no longer being fled
            this.Fleeing = false;
        }
        
        if(this.DebugDrawEnabled)
        {
            this.DrawDebug(event.Dt);
        }
    }
    
    function DrawDebug(dt : Real)
    {
        var line1 = DebugLine();
        line1.Start = this.Owner.Transform.Translation;
        line1.End = this.Owner.Transform.Translation + this.Owner.RigidBody.Velocity;
        line1.HeadSize = 0.5;
        line1.Color = Real4(0.0,1.0,0.0,1.0);
        DebugDraw.Add(line1);
    }
}
