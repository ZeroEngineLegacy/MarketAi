/************************************************************************************************************/
/* Copyright 2016 DigiPen, All Rights Reserved                                                              */
/* Last Update: 1/3/2016                                                                                    */
/* Author: Zero Engine Team                                                                                 */
/* Last updated by: Arend Danielek                                                                          */
/* Class: Pursue                                                                                            */
/* Brief: This component will cause the object to pursue a target object by                                 */
/* using the target obect's velocity to attampt to estimate a future position                               */
/************************************************************************************************************/

class Pursue : ZilchComponent
{
    // this component requires a rigidBody component
    [Dependency]
    var RigidBody : RigidBody = null;
    
    // Seek requires an Orientation & OrientationHelper component
    [Dependency]
    var Orientation : Orientation = null;
    
    [Dependency]
    var OrientationHelper : OrientationHelper = null;
    
    // Determines if the component is active or not
    [Property]
    var Active : Boolean = true;
    
    // Target object to be pursue towards
    [Property]
    var Target : CogPath = null;
    
    // Range from the object in which it is valid to pursue the target object
    // If the range is 0 the target object will always be pursued
    [Property]
    var PursueRange : Real
    {
        get { return this.PursueRangeDistance; }
        set
        {
            if (Math.ApproximatelyEqual(value, 0.0, 0.001))
                this.NoPursueRange = true;
            
            this.PursueRangeDistance = value;
        }
    }
    
    // Magnitude of the velocity vector to be used when prediction target motion
    // If the range is 0.0 Dt will be used to estimate the position of the object in the next frame
    [Property]
    var PredictionRange : Real = 0.0;
    
    // Distance from the goal we're trying to seek to
    [Property]
    var GoalDistance : Real = 0.0;
    
    // Magnitude of the linear impulse to be applied each frame for pursuing movement
    [Property]
    var Speed : Real = 10.0;
    
    // the rate at which the object will rotate to match it velocity direction in degrees per second
    [Property]
    var RotationSpeed : Real = 0.0;
    
    [Property]
    var DebugDrawEnabled : Boolean = false;
    
    var PursueRangeDistance : Real = 0.0;
    var NoPursueRange : Boolean = true;
    
    // Used to track if the object is pursuing
    var Pursuing : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        // If this component is not active do nothing
        if(!this.Active)
        {
            return;
        }
        
        // Get the target object's normalized velocity for the prediction estimation
        var targVelDir = this.Target.Cog.RigidBody.Velocity;
        
        // If PredictionRange is 0.0 then use Dt to predict target object motion
        var predictionMagnitude = this.PredictionRange;
        if(this.PredictionRange == 0.0)
        {
            predictionMagnitude = event.Dt;
        }
        else
        {
            targVelDir = Math.Normalize(targVelDir);
        }
        
        // Estimate the target object's predicted future position
        var targPos = this.Target.Cog.Transform.Translation + (targVelDir * predictionMagnitude);
        
        // Calculate a vector to the target object's predicted position
        var targDir = targPos - this.Owner.Transform.Translation;
        var targDis = Math.Length(targDir);
        
        // Normalize the vector to the target object so it does not affect movement speed
        targDir /= targDis;
        
        // Check if the target object is with in the range to seek it
        if((this.NoPursueRange || targDis < this.PursueRange) && targDis > this.GoalDistance)
        {
            // Record that the object is pursuing the target object
            this.Pursuing = true;
            
            // Apply a force to move the object towards the target object's position
            this.RigidBody.Velocity = targDir * this.Speed;
        }
        else
        {
            // If the target object is out of pursue range record that the targ object is no longer being pursued out
            this.Pursuing = false;
            
            // Bring the object to a smooth stop, based on it's linear distance from the target
            var ratio = targDis / this.GoalDistance;
            
            this.RigidBody.Velocity = targDir * this.Speed * ratio;
        }
        
        // Align the object at the given rotation rate to the direction of its velocity
        var newRot = this.Orientation.GetLookAtDirectionRotation(Math.Normalize(this.Owner.RigidBody.Velocity));
        
        this.Owner.Transform.Rotation = Math.Slerp(
            this.Owner.Transform.Rotation, newRot,
            Math.ToRadians(this.RotationSpeed) * event.Dt
        );
        
        if(this.DebugDrawEnabled)
        {
            this.DrawDebug(event.Dt);
        }
    }
    
    function DrawDebug(dt : Real)
    {
        var line = new DebugLine();
        line.Start = this.Owner.Transform.Translation;
        line.End = this.Owner.Transform.Translation + this.Owner.RigidBody.Velocity;
        line.HeadSize = 0.5;
        line.Color = Real4(0.0,1.0,0.0,1.0);
        DebugDraw.Add(line);
    }
}
